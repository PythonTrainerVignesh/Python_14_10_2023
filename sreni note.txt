Python is an 'Interpreter'
LEFT to RIGHT
Interprets compiles each line of source code one by one. Adv. -  Easy to debug. 
Compiler compiles the entire code by combining it as a package. If there is an error, it will just say it is an error rather than explaining about the type or location of the error.

Difference between Interpreter and Compiler --> Interpreter codes are risky. In compiler, codes are safe as it cannot be cracked easily.

Low level language - Machine readable
High level language - User readable 

**Python is a high level language.
***Python is CASE-SENSITIVE

Any language for the matter should comprise of the following components:
1) Alpha numeric characters
2) Dictionary (Python modules) - LEXIS in Python
3) Syntax 
4) Symantics (should make sense/meaning)

PYTHON MODULES come from
1. Python itself
2. Third party modules - using pip (eg; github)
3. from your own code

1. For changing drives
C: or D: or E:

2. To go backward from one folder to another
cd ..
cd - file path changes the directory

3. To list files and folders
dir

4. git clone - clones the files in repo to the local disk
5. git pull - pulls the files in repo

DATATYPES (string, int, float, bool)

print("hello", "world") - 2 positional arguments given inside print function

2 - KEYWORD ARGUMENTS OF PRINT FUNCTION
1. sep= Indicates how each argument should be separated
2. end= Indicates how the last argument should end.

Special characters:
Will work inside ' or " only.
\n - new line
\t - tab space

Escapte Character - Used to break that character as an ending syntax character
"\"
print ("I'm learning Python") --> I'm learning Python
print ('I\'m learnig "Python"') --> I'm learning "Python"

(oct-15)
operators:7 types of opp (+,-,*,/,//,**,%)
comparison o
n = (input('Enter the number: '))
print(int(n)>=100)

